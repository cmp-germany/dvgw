Type.registerNamespace('MonoX.WebServices');
MonoX.WebServices.ChatService=function() {
MonoX.WebServices.ChatService.initializeBase(this);
this._timeout = 0;
this._userContext = null;
this._succeeded = null;
this._failed = null;
}
MonoX.WebServices.ChatService.prototype={
_get_path:function() {
 var p = this.get_path();
 if (p) return p;
 else return MonoX.WebServices.ChatService._staticInstance.get_path();},
UpdateUserOnlineStatus:function(userIds,succeededCallback, failedCallback, userContext) {
/// <param name="userIds" type="Array">System.String[]</param>
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
return this._invoke(this._get_path(), 'UpdateUserOnlineStatus',false,{userIds:userIds},succeededCallback,failedCallback,userContext); },
GetInitialUserList:function(succeededCallback, failedCallback, userContext) {
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
return this._invoke(this._get_path(), 'GetInitialUserList',false,{},succeededCallback,failedCallback,userContext); },
GetChatUserList:function(searchCriteria,succeededCallback, failedCallback, userContext) {
/// <param name="searchCriteria" type="String">System.String</param>
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
return this._invoke(this._get_path(), 'GetChatUserList',false,{searchCriteria:searchCriteria},succeededCallback,failedCallback,userContext); },
RenderChatUser:function(sUserId,succeededCallback, failedCallback, userContext) {
/// <param name="sUserId" type="String">System.String</param>
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
return this._invoke(this._get_path(), 'RenderChatUser',false,{sUserId:sUserId},succeededCallback,failedCallback,userContext); },
getUnreadSessions:function(succeededCallback, failedCallback, userContext) {
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
return this._invoke(this._get_path(), 'getUnreadSessions',false,{},succeededCallback,failedCallback,userContext); },
SetChatMessagesRead:function(userId,succeededCallback, failedCallback, userContext) {
/// <param name="userId" type="String">System.String</param>
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
return this._invoke(this._get_path(), 'SetChatMessagesRead',false,{userId:userId},succeededCallback,failedCallback,userContext); }}
MonoX.WebServices.ChatService.registerClass('MonoX.WebServices.ChatService',Sys.Net.WebServiceProxy);
MonoX.WebServices.ChatService._staticInstance = new MonoX.WebServices.ChatService();
MonoX.WebServices.ChatService.set_path = function(value) {
MonoX.WebServices.ChatService._staticInstance.set_path(value); }
MonoX.WebServices.ChatService.get_path = function() { 
/// <value type="String" mayBeNull="true">The service url.</value>
return MonoX.WebServices.ChatService._staticInstance.get_path();}
MonoX.WebServices.ChatService.set_timeout = function(value) {
MonoX.WebServices.ChatService._staticInstance.set_timeout(value); }
MonoX.WebServices.ChatService.get_timeout = function() { 
/// <value type="Number">The service timeout.</value>
return MonoX.WebServices.ChatService._staticInstance.get_timeout(); }
MonoX.WebServices.ChatService.set_defaultUserContext = function(value) { 
MonoX.WebServices.ChatService._staticInstance.set_defaultUserContext(value); }
MonoX.WebServices.ChatService.get_defaultUserContext = function() { 
/// <value mayBeNull="true">The service default user context.</value>
return MonoX.WebServices.ChatService._staticInstance.get_defaultUserContext(); }
MonoX.WebServices.ChatService.set_defaultSucceededCallback = function(value) { 
 MonoX.WebServices.ChatService._staticInstance.set_defaultSucceededCallback(value); }
MonoX.WebServices.ChatService.get_defaultSucceededCallback = function() { 
/// <value type="Function" mayBeNull="true">The service default succeeded callback.</value>
return MonoX.WebServices.ChatService._staticInstance.get_defaultSucceededCallback(); }
MonoX.WebServices.ChatService.set_defaultFailedCallback = function(value) { 
MonoX.WebServices.ChatService._staticInstance.set_defaultFailedCallback(value); }
MonoX.WebServices.ChatService.get_defaultFailedCallback = function() { 
/// <value type="Function" mayBeNull="true">The service default failed callback.</value>
return MonoX.WebServices.ChatService._staticInstance.get_defaultFailedCallback(); }
MonoX.WebServices.ChatService.set_enableJsonp = function(value) { MonoX.WebServices.ChatService._staticInstance.set_enableJsonp(value); }
MonoX.WebServices.ChatService.get_enableJsonp = function() { 
/// <value type="Boolean">Specifies whether the service supports JSONP for cross domain calling.</value>
return MonoX.WebServices.ChatService._staticInstance.get_enableJsonp(); }
MonoX.WebServices.ChatService.set_jsonpCallbackParameter = function(value) { MonoX.WebServices.ChatService._staticInstance.set_jsonpCallbackParameter(value); }
MonoX.WebServices.ChatService.get_jsonpCallbackParameter = function() { 
/// <value type="String">Specifies the parameter name that contains the callback function name for a JSONP request.</value>
return MonoX.WebServices.ChatService._staticInstance.get_jsonpCallbackParameter(); }
MonoX.WebServices.ChatService.set_path("/MonoX/WebServices/ChatService.asmx");
MonoX.WebServices.ChatService.UpdateUserOnlineStatus= function(userIds,onSuccess,onFailed,userContext) {
/// <param name="userIds" type="Array">System.String[]</param>
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
MonoX.WebServices.ChatService._staticInstance.UpdateUserOnlineStatus(userIds,onSuccess,onFailed,userContext); }
MonoX.WebServices.ChatService.GetInitialUserList= function(onSuccess,onFailed,userContext) {
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
MonoX.WebServices.ChatService._staticInstance.GetInitialUserList(onSuccess,onFailed,userContext); }
MonoX.WebServices.ChatService.GetChatUserList= function(searchCriteria,onSuccess,onFailed,userContext) {
/// <param name="searchCriteria" type="String">System.String</param>
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
MonoX.WebServices.ChatService._staticInstance.GetChatUserList(searchCriteria,onSuccess,onFailed,userContext); }
MonoX.WebServices.ChatService.RenderChatUser= function(sUserId,onSuccess,onFailed,userContext) {
/// <param name="sUserId" type="String">System.String</param>
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
MonoX.WebServices.ChatService._staticInstance.RenderChatUser(sUserId,onSuccess,onFailed,userContext); }
MonoX.WebServices.ChatService.getUnreadSessions= function(onSuccess,onFailed,userContext) {
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
MonoX.WebServices.ChatService._staticInstance.getUnreadSessions(onSuccess,onFailed,userContext); }
MonoX.WebServices.ChatService.SetChatMessagesRead= function(userId,onSuccess,onFailed,userContext) {
/// <param name="userId" type="String">System.String</param>
/// <param name="succeededCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="failedCallback" type="Function" optional="true" mayBeNull="true"></param>
/// <param name="userContext" optional="true" mayBeNull="true"></param>
MonoX.WebServices.ChatService._staticInstance.SetChatMessagesRead(userId,onSuccess,onFailed,userContext); }
